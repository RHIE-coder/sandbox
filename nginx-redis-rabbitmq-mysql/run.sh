#!/bin/bash

source ./scripts/colors.sh

ERROR="${BOLD};${WHITE};${BG_RED}${_m}[ERROR]${RESET}"
INFO="${BOLD};${YELLOW}${_m}"
TARGET="${BOLD};${CYAN}${_m}"


export env_file="./.env"
function ensure_envfile()
{
    if [ ! -f "$env_file" ]; then
        echo -e "${ERROR} ${TARGET}$env_file${RESET} does not exist."
        exit 1
    fi

    source "$env_file"
}

function check_envVar()
{
    if [ -z "$REDIS_PASSWORD" ]; then
        echo -e "${POINT}REDIS_PASSWORD${RESET} ${INFO}environment variable is not visible${RESET}"
        exit 1
    fi
}

function generate_redisconfig()
{
    cat <<EOL > ../config/redis.conf
# Redis configuration file (generated by run.sh)

# docker exec -it redis redis-cli -h localhost -p 6379
# AUTH <password>
requirepass $REDIS_PASSWORD
EOL

    # 파일 생성 결과 확인
    if [ $? -eq 0 ]; then
        echo -e "${TARGET}redis.conf${RESET} is generated"
    else
        echo -e "${ERROR}Failed to generate ${TARGET}redis.conf${RESET}"
        exit 1  # 실패 시 스크립트 종료
    fi
}

function display_help()
{
    echo -e "-------------------------------------"
    echo -e 
    echo -e "  Usage: $0 { help | generate | up | down | down-v }"
    echo -e
    echo -e "    ${TARGET}help${RESET}       ${INFO}print usage${RESET}"
    echo -e
    echo -e "    ${TARGET}generate${RESET}   ${INFO}generate config file${RESET}"
    echo -e
    echo -e "    ${TARGET}up${RESET}         ${INFO}container up${RESET}"
    echo -e
    echo -e "    ${TARGET}down${RESET}       ${INFO}container down${RESET}"
    echo -e
    echo -e "    ${TARGET}down-v${RESET}     ${INFO}container down with volumes${RESET}"
    echo -e
    echo -e "-------------------------------------"
}

function main()
{
    ensure_envfile
    check_envVar

    case "$1" in
        "generate")
            echo -e "${INFO}generating config files${RESET}"
            generate_redisconfig
            echo
            ;;
        "up")
            echo -e "${INFO}container up${RESET}"
            docker compose up -d
            docker ps
            echo -e "${INFO}set enable rabbitmq management${RESET}"
            sleep 2
            docker exec rabbitmq rabbitmq-plugins enable rabbitmq_management
            echo
            ;;
        "down")
            echo -e "${INFO}container down${RESET}"
            docker compose down
            echo
            ;;
        "down-v")
            echo -e "${INFO}container down with volumes${RESET}"
            docker compose down -v
            echo
            ;;
        "help")
            display_help
            echo
            ;;
        *)
            echo -e "${ERROR} nothing to do - please, check args"
            display_help
            ;;
    esac

}

main "$@"