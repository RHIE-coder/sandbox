#!/bin/bash

source ./scripts/colors.sh

ERROR="${BOLD};${WHITE};${BG_RED}${_m}[ERROR]${RESET}"
INFO="${BOLD};${YELLOW}${_m}"
TARGET="${BOLD};${CYAN}${_m}"


export env_file="./.env"
function ensure_envfile()
{
    if [ ! -f "$env_file" ]; then
        echo -e "${ERROR} ${TARGET}$env_file${RESET} does not exist."
        exit 1
    fi

    source "$env_file"
}

function check_envVar()
{
    if [ -z "$REDIS_PASSWORD" ]; then
        echo -e "${POINT}REDIS_PASSWORD${RESET} ${INFO}environment variable is not visible${RESET}"
        exit 1
    fi
}

function generate_redisconfig()
{
    cat <<EOL > ./config/redis.conf
# Redis configuration file (generated by run.sh)

# docker exec -it redis redis-cli -h localhost -p 6379
# AUTH <password>
requirepass $REDIS_PASSWORD
EOL

    # 파일 생성 결과 확인
    if [ $? -eq 0 ]; then
        echo -e "${TARGET}redis.conf${RESET} is generated"
    else
        echo -e "${ERROR}Failed to generate ${TARGET}redis.conf${RESET}"
        exit 1  # 실패 시 스크립트 종료
    fi
}

function generate_keystore_dir()
{
    mkdir -p ./config/root
    mkdir -p ./config/zookeeper
    mkdir -p ./config/kafka
}

function generate_ca()
{
    # 루트 키 생성
    openssl genpkey -algorithm RSA -out ./config/root/rootCA.key -pkeyopt rsa_keygen_bits:2048

    # 루트 인증서 생성
    openssl req -x509 -new -nodes -key ./config/root/rootCA.key -sha256 -days 1024 -out ./config/root/rootCA.crt -subj "/C=US/ST=California/L=San Francisco/O=MyCompany/OU=Org/CN=localhost"
}

function generate_zookeeper_ssl()
{
    # Zookeeper 키 생성
    openssl genpkey -algorithm RSA -out ./config/zookeeper/zookeeper.key -pkeyopt rsa_keygen_bits:2048

    # Zookeeper 인증서 서명 요청(CSR) 생성
    openssl req -new -key  ./config/zookeeper/zookeeper.key -out ./config/zookeeper/zookeeper.csr -subj "/C=US/ST=California/L=San Francisco/O=MyCompany/OU=Org/CN=localhost"

    # Zookeeper 인증서 생성 및 서명
    openssl x509 -req -in ./config/zookeeper/zookeeper.csr -CA ./config/root/rootCA.crt -CAkey ./config/root/rootCA.key -CAcreateserial -out ./config/zookeeper/zookeeper.crt -days 500 -sha256
}

function generate_kafka_ssl()
{
    # Kafka 키 생성
    openssl genpkey -algorithm RSA -out ./config/kafka/kafka.key -pkeyopt rsa_keygen_bits:2048

    # Kafka 인증서 서명 요청(CSR) 생성
    openssl req -new -key ./config/kafka/kafka.key -out ./config/kafka/kafka.csr -subj "/C=US/ST=California/L=San Francisco/O=MyCompany/OU=Org/CN=kafka.mycompany.com"

    # Kafka 인증서 생성 및 서명
    openssl x509 -req -in ./config/kafka/kafka.csr -CA ./config/root/rootCA.crt -CAkey ./config/root/rootCA.key -CAcreateserial -out ./config/kafka/kafka.crt -days 500 -sha256
}

function generate_javakeystore()
{
    # PKCS12 형식으로 변환
    openssl pkcs12 -export -in ./config/zookeeper/zookeeper.crt -inkey ./config/zookeeper/zookeeper.key -out ./config/zookeeper/zookeeper.p12 -name zookeeper -CAfile ./config/root/rootCA.crt -caname root -chain
    openssl pkcs12 -export -in ./config/kafka/kafka.crt -inkey ./config/kafka/kafka.key -out ./config/kafka/kafka.p12 -name kafka -CAfile ./config/root/rootCA.crt -caname root -chain

    # Zookeeper JKS 파일 생성
    keytool -importkeystore -deststorepass $SSL_PASSWORD -destkeypass $SSL_PASSWORD -destkeystore ./config/zookeeper/zookeeper.keystore.jks -srckeystore ./config/zookeeper/zookeeper.p12 -srcstoretype PKCS12 -srcstorepass $SSL_PASSWORD -alias zookeeper

    # Kafka JKS 파일 생성
    keytool -importkeystore -deststorepass $SSL_PASSWORD -destkeypass $SSL_PASSWORD -destkeystore ./config/kafka/kafka.keystore.jks -srckeystore ./config/kafka/kafka.p12 -srcstoretype PKCS12 -srcstorepass $SSL_PASSWORD -alias kafka

    # Truststore 생성
    keytool -import -noprompt -trustcacerts -alias root -file ./config/root/rootCA.crt -keystore ./config/zookeeper/zookeeper.truststore.jks -storepass $SSL_PASSWORD
    keytool -import -noprompt -trustcacerts -alias root -file ./config/root/rootCA.crt -keystore ./config/kafka/kafka.truststore.jks -storepass $SSL_PASSWORD
}

function display_help()
{
    echo -e "-------------------------------------"
    echo -e 
    echo -e "  Usage: $0 { help | generate | up | down | down-v }"
    echo -e
    echo -e "    ${TARGET}help${RESET}       ${INFO}print usage${RESET}"
    echo -e
    echo -e "    ${TARGET}generate${RESET}   ${INFO}generate config file${RESET}"
    echo -e
    echo -e "    ${TARGET}up${RESET}         ${INFO}container up${RESET}"
    echo -e
    echo -e "    ${TARGET}down${RESET}       ${INFO}container down${RESET}"
    echo -e
    echo -e "    ${TARGET}vdown${RESET}      ${INFO}container down with volumes${RESET}"
    echo -e
    echo -e "-------------------------------------"
}

function generate_kafka_credentials()
{
    cat <<EOL > ./config/kafka/kafka-ssl-credentials.properties
ssl.endpoint.identification.algorithm=https
security.protocol=SSL
ssl.truststore.location=/etc/kafka/secrets/kafka.truststore.jks
ssl.truststore.password=${SSL_PASSWORD}
ssl.keystore.location=/etc/kafka/secrets/kafka.keystore.jks
ssl.keystore.password=${SSL_PASSWORD}
ssl.key.password=${SSL_PASSWORD}
EOL
    # 파일 생성 결과 확인
    if [ $? -eq 0 ]; then
        echo -e "${TARGET}kafka-ssl-credentials.properties${RESET} is generated"
    else
        echo -e "${ERROR}Failed to generate ${TARGET}kafka-ssl-credentials.properties${RESET}"
        exit 1  # 실패 시 스크립트 종료
    fi
}


function main()
{
    ensure_envfile
    check_envVar

    case "$1" in
        "generate")
            echo -e "${INFO}generating config file and crypto keys${RESET}"
            generate_redisconfig
            generate_keystore_dir
            generate_ca
            generate_zookeeper_ssl
            generate_kafka_ssl
            generate_javakeystore
            generate_kafka_credentials
            echo
            ;;
        "up")
            echo -e "${INFO}container up${RESET}"
            docker compose up -d
            sleep 2
            echo -e "${INFO}set enable rabbitmq management${RESET}"
            docker exec rabbitmq rabbitmq-plugins enable rabbitmq_management
            sleep 2
            echo -e "${INFO}check survived containers${RESET}"
            docker ps --format={{.Names}}
            echo
            ;;
        "down")
            echo -e "${INFO}container down${RESET}"
            docker compose down
            echo
            ;;
        "vdown")
            echo -e "${INFO}container down with volumes${RESET}"
            docker compose down -v
            echo
            ;;
        "help")
            display_help
            echo
            ;;
        *)
            echo -e "${ERROR} nothing to do - please, check args"
            display_help
            ;;
    esac

}

main "$@"